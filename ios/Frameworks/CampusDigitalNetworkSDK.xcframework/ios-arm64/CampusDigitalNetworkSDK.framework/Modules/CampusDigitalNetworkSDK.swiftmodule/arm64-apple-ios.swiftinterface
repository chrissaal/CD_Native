// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CampusDigitalNetworkSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CampusDigitalNetworkSDK
import CommonCrypto
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol EtagProvider {
  func etag(for service: Swift.String) -> Swift.String?
}
public struct EtagProviderImpl {
  public init(userDefaults: Foundation.UserDefaults = UserDefaults.standard)
}
extension CampusDigitalNetworkSDK.EtagProviderImpl : CampusDigitalNetworkSDK.EtagProvider {
  public func etag(for service: Swift.String) -> Swift.String?
}
extension Swift.Encodable {
  public func toQueryItems() -> [Foundation.URLQueryItem]?
  public func toUrlEncodedData() -> Foundation.Data?
}
public protocol EtagCleaner {
  func clean()
}
public class EtagCleanerImpl {
  public init(userDefaults: Foundation.UserDefaults = UserDefaults.standard, bundle: Foundation.Bundle = Bundle(for: EtagCleanerImpl.self))
  @objc deinit
}
extension CampusDigitalNetworkSDK.EtagCleanerImpl : CampusDigitalNetworkSDK.EtagCleaner {
  public func clean()
}
extension Swift.Encodable {
  public func jsonObject() -> [Swift.String : Any]?
  public func toData() -> Foundation.Data?
}
public protocol ApiResponse {
  var statusCode: Swift.Int { get }
  var headers: [Swift.AnyHashable : Any] { get }
  var data: Foundation.Data? { get }
  var body: Swift.String { get }
  var model: (any Swift.Decodable)? { get }
}
public enum Environment : Swift.String {
  case DEVELOPMENT
  case PREPRODUCTION
  case PRODUCTION
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MultipartResource {
  public init(name: Swift.String, data: Foundation.Data?, mimeType: Swift.String)
}
public enum HTTPError : Swift.Error {
  case unknown(statusCode: Swift.Int, body: Swift.String)
  case badRequest(statusCode: Swift.Int, body: Swift.String)
  case unauthorizedError(statusCode: Swift.Int, body: Swift.String)
  case forbidden(statusCode: Swift.Int, body: Swift.String)
  case notFound(statusCode: Swift.Int, body: Swift.String)
  case timeout(statusCode: Swift.Int, body: Swift.String)
  case conflict(statusCode: Swift.Int, body: Swift.String)
  case gone(statusCode: Swift.Int, body: Swift.String)
  case unprocessable(statusCode: Swift.Int, body: Swift.String)
  case internalError(statusCode: Swift.Int, body: Swift.String)
  case badGateway(statusCode: Swift.Int, body: Swift.String)
}
extension CampusDigitalNetworkSDK.HTTPError : Swift.Equatable {
  public static func == (a: CampusDigitalNetworkSDK.HTTPError, b: CampusDigitalNetworkSDK.HTTPError) -> Swift.Bool
}
extension Foundation.HTTPURLResponse {
  public func taskDescription(_ responseData: Foundation.Data?) -> Swift.String
}
public struct EmptyResponse {
  public init()
}
extension CampusDigitalNetworkSDK.EmptyResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ApiResource {
  var path: Swift.String { get }
  var urlComponents: Foundation.URLComponents { get }
  var headers: [Swift.AnyHashable : Any]? { get }
  var queryItems: [Foundation.URLQueryItem]? { get }
  var bodyParameters: (any Swift.Encodable)? { get }
  var multipartBodyParameters: (any CampusDigitalNetworkSDK.MultipartFormData)? { get }
  var method: CampusDigitalNetworkSDK.Method { get }
  var cachePolicy: Foundation.URLRequest.CachePolicy { get }
  var timeout: Foundation.TimeInterval { get }
}
public struct CacheProviderImpl {
}
public enum Method : Swift.String {
  case get
  case post
  case formUrlencoded
  case multipart
  case put
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkClientError : Swift.Error {
  case system(body: Swift.String)
  case decoding(response: any CampusDigitalNetworkSDK.ApiResponse)
  case server(httpError: CampusDigitalNetworkSDK.HTTPError)
  case customError(error: any Swift.Decodable, httpError: CampusDigitalNetworkSDK.HTTPError)
}
extension CampusDigitalNetworkSDK.NetworkClientError : Swift.Equatable {
  public static func == (lhs: CampusDigitalNetworkSDK.NetworkClientError, rhs: CampusDigitalNetworkSDK.NetworkClientError) -> Swift.Bool
}
public struct EmptyError {
  public init()
}
extension CampusDigitalNetworkSDK.EmptyError : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ErrorResponse {
  var result: CampusDigitalNetworkSDK.ResultModel { get }
}
public enum NetworkingSSLPolicy {
  case none
  case hashedPublicKey(newHashedPublicKey: Swift.String, oldHashedPublicKey: Swift.String)
  case fullCertificate(bundle: Foundation.Bundle, fileName: Swift.String, fileExtension: Swift.String)
  case publicKeyAndCertificate(newHashedPublicKey: Swift.String, oldHashedPublicKey: Swift.String, bundle: Foundation.Bundle, fileName: Swift.String, fileExtension: Swift.String)
}
extension CampusDigitalNetworkSDK.NetworkingSSLPolicy : Swift.Equatable {
  public static func == (a: CampusDigitalNetworkSDK.NetworkingSSLPolicy, b: CampusDigitalNetworkSDK.NetworkingSSLPolicy) -> Swift.Bool
}
extension Foundation.URLRequest {
  public func taskDescription() -> Swift.String
}
public protocol MultipartFormData {
  var httpBody: Foundation.NSMutableData { get }
}
public protocol MultipartFormDataBuilder {
  func buildMultipart(params: [Swift.String : Any], resource: CampusDigitalNetworkSDK.MultipartResource?)
}
public struct MultipartFormDataRequest {
  public var httpBody: Foundation.NSMutableData
  public init(boundary: Swift.String, httpBody: Foundation.NSMutableData = NSMutableData())
}
extension CampusDigitalNetworkSDK.MultipartFormDataRequest : CampusDigitalNetworkSDK.MultipartFormData {
}
extension CampusDigitalNetworkSDK.MultipartFormDataRequest : CampusDigitalNetworkSDK.MultipartFormDataBuilder {
  public func buildMultipart(params: [Swift.String : Any], resource: CampusDigitalNetworkSDK.MultipartResource?)
}
public protocol CacheCleaner {
  func clean()
}
public struct CacheCleanerImpl {
  public init(urlCache: Foundation.URLCache = URLCache.shared)
}
extension CampusDigitalNetworkSDK.CacheCleanerImpl : CampusDigitalNetworkSDK.CacheCleaner {
  public func clean()
}
public protocol ServiceResponse {
  associatedtype DataType
  var result: CampusDigitalNetworkSDK.ResultModel { get }
  var data: Self.DataType { get }
}
public enum NetworkClientConstants {
  public static let ifNoneMatch: Swift.String
  public static let etag: Swift.String
  public static let authorization: Swift.String
  public static let bearer: Swift.String
  public static let contentType: Swift.String
  public static let applicationJson: Swift.String
  public static let urlEncoded: Swift.String
  public static let formData: Swift.String
  public static let accept: Swift.String
  public static let apiKey: Swift.String
  public static let acceptLanguage: Swift.String
}
public protocol NetworkClient {
  func perform<ResponseType>(request: any CampusDigitalNetworkSDK.ApiResource, type: ResponseType.Type, completion: @escaping (Swift.Result<any CampusDigitalNetworkSDK.ApiResponse, CampusDigitalNetworkSDK.NetworkClientError>) -> Swift.Void) where ResponseType : Swift.Decodable
  func perform<ResponseType, ErrorType>(request: any CampusDigitalNetworkSDK.ApiResource, type: ResponseType.Type, errorType: ErrorType.Type, completion: @escaping (Swift.Result<any CampusDigitalNetworkSDK.ApiResponse, CampusDigitalNetworkSDK.NetworkClientError>) -> Swift.Void) where ResponseType : Swift.Decodable, ErrorType : Swift.Decodable
  func cleanPersistence()
}
@_hasMissingDesignatedInitializers final public class NetworkClientImpl {
  public struct Constants {
    public static let dispatchQueueLabel: Swift.String
  }
  public init(cacheEnabled: Swift.Bool = true, environment: CampusDigitalNetworkSDK.Environment = .PRODUCTION, networkingSSLPolicy: CampusDigitalNetworkSDK.NetworkingSSLPolicy? = nil)
  @objc deinit
}
extension CampusDigitalNetworkSDK.NetworkClientImpl : CampusDigitalNetworkSDK.NetworkClient {
  final public func perform<ResponseType>(request: any CampusDigitalNetworkSDK.ApiResource, type: ResponseType.Type, completion: @escaping (Swift.Result<any CampusDigitalNetworkSDK.ApiResponse, CampusDigitalNetworkSDK.NetworkClientError>) -> Swift.Void) where ResponseType : Swift.Decodable
  final public func perform<ResponseType, ErrorType>(request: any CampusDigitalNetworkSDK.ApiResource, type: ResponseType.Type, errorType: ErrorType.Type, completion: @escaping (Swift.Result<any CampusDigitalNetworkSDK.ApiResponse, CampusDigitalNetworkSDK.NetworkClientError>) -> Swift.Void) where ResponseType : Swift.Decodable, ErrorType : Swift.Decodable
  final public func cleanPersistence()
}
public struct ResultModel {
  public let code: Swift.String
  public let message: Swift.String
  public init(code: Swift.String, message: Swift.String)
}
extension CampusDigitalNetworkSDK.ResultModel : Swift.Equatable {
  public static func == (a: CampusDigitalNetworkSDK.ResultModel, b: CampusDigitalNetworkSDK.ResultModel) -> Swift.Bool
}
extension CampusDigitalNetworkSDK.ResultModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension CampusDigitalNetworkSDK.Environment : Swift.Equatable {}
extension CampusDigitalNetworkSDK.Environment : Swift.Hashable {}
extension CampusDigitalNetworkSDK.Environment : Swift.RawRepresentable {}
extension CampusDigitalNetworkSDK.Method : Swift.Equatable {}
extension CampusDigitalNetworkSDK.Method : Swift.Hashable {}
extension CampusDigitalNetworkSDK.Method : Swift.RawRepresentable {}
